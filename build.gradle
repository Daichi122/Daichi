buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()

        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url 'https://plugins.gradle.org/m2' }
        maven { url 'https://repo.spongepowered.org/maven' }
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '2.1-SNAPSHOT'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.6-SNAPSHOT'
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '4.0.4'
    }
}

apply plugin: 'java'
apply plugin: 'idea'

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

apply plugin: 'com.github.johnrengelman.shadow'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
def getGitTag = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--abbrev=0'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def release = false
version = release ? "${getGitTag}" : "${getGitBranch}-${getGitHash}"
group = mod_group
archivesBaseName = mod_id

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

minecraft {
    version = minecraft_version + '-' + forge_version
    runDir = 'run'
    mappings = mappings_version
    makeObfSourceJar = true

    String resolved_core_mod = mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id)
    clientJvmArgs += '-Dfml.coreMods.load=' + resolved_core_mod
    serverJvmArgs += '-Dfml.coreMods.load=' + resolved_core_mod

    String resolved_mixin_configs = mod_mixin_configs.replace('${mod_id}', mod_id)
    clientRunArgs += '--mixin ' + resolved_mixin_configs
    serverRunArgs += '--mixin ' + resolved_mixin_configs
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spongepowered.org/maven/' }
}

dependencies {
    compile('org.spongepowered:mixin:0.7.10-SNAPSHOT') {
        exclude module: 'launchwrapper'
    }

    compile 'com.jagrosh:DiscordIPC:0.4'
    compile('commons-io:commons-io') {
        version {
            strictly '2.5'
        }
    }

    compile fileTree(include: ['*.jar'], dir: 'libs')
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'mod_id': mod_id, 'mod_name': mod_name, 'version': project.version,
                'mcversion': project.minecraft.version, 'mod_description': mod_description,
                'mod_author': mod_author
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

mixin {
    add sourceSets.main, mod_mixin_configs.replace('${mod_id}', mod_id).replace('.json', '.refmap.json')
}

task replaceConstants << {
    def version = project.version
    ant.replaceregexp(match: 'CURRENT_VERSION', replace: version, flags: 'g', byline: true) {
        fileset(dir: 'src/main/java/tk/bookyclient/bookyclient/utils', includes: 'Constants.java')
    }
}

task undoReplaceConstants << {
    def version = project.version
    ant.replaceregexp(match: version, replace: 'CURRENT_VERSION', flags: 'g', byline: true) {
        fileset(dir: 'src/main/java/tk/bookyclient/bookyclient/utils', includes: 'Constants.java')
    }
}

jar {
    manifest.attributes(
            'Manifest-Version': 1.0,
            'ModSide': 'CLIENT',
            'FMLAT': mod_access_transformer.replace('${mod_id}', mod_id),

            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': '0',
            'MixinConfigs': mod_mixin_configs.replace('${mod_id}', mod_id),
    )
}

shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('com.jagrosh:DiscordIPC'))
        include(dependency('org.json:json'))
        include(dependency('org.slf4j:slf4j-api'))
        include(dependency('log4j:log4j:1.2.17'))
        include(dependency('org.scijava:native-lib-loader'))
        include(dependency('com.kohlschutter.junixsocket:junixsocket-common'))
        include(dependency('com.kohlschutter.junixsocket:junixsocket-native-common'))
    }

    exclude 'dummyThing'
    exclude 'LICENSE.txt'

    classifier = ''
}

reobf { shadowJar { mappingType = 'SEARGE' } }
tasks.reobfShadowJar.mustRunAfter shadowJar

configurations {
    external
    compile.extendsFrom external
}

build {
    dependsOn shadowJar
}

compileJava {
    dependsOn replaceConstants
}

jar {
    dependsOn undoReplaceConstants
}